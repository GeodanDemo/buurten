<link rel="import" href="../bower_components/polymer/polymer.html">
<link rel="import" href="../bower_components/core-drawer-panel/core-drawer-panel.html">
<link rel="import" href="../bower_components/core-header-panel/core-header-panel.html">
<link rel="import" href="../bower_components/core-toolbar/core-toolbar.html">
<link rel="import" href="../bower_components/core-icons/social-icons.html">
<link rel="import" href="../bower_components/core-icons/image-icons.html">
<link rel="import" href="../bower_components/paper-shadow/paper-shadow.html">
<link rel="import" href="../bower_components/paper-button/paper-button.html">
<link rel="import" href="../bower_components/paper-icon-button/paper-icon-button.html">
<link rel="import" href="./g-layermanager.html"> 
<link rel="import" href="./g-filtermanager.html"> 
<link rel="import" href="../bower_components/paper-dialog/paper-action-dialog.html">
<link rel="import" href="./g-getfeatureinfo.html"> 


<script src="../bower_components/leaflet/dist/leaflet-src.js"></script>     
<script src="../bower_components/leaflet-hash/leaflet-hash.js"></script>
<script type="text/javascript" src="https://stamen-maps.a.ssl.fastly.net/js/tile.stamen.js?v1.3.0"></script> 
<script src="../Leaflet.MapboxVectorTile.js"></script>
<polymer-element name="pico-app">
  <template>
      <link rel="stylesheet" href="../bower_components/leaflet/dist/leaflet.css" no-shim/>    
<style>

#container {
    top: 64px;
    left: 4px;
    right: 64px;
    bottom: 5px;
    background-color: #fff;
    box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.26);
    border-radius: 5px;
    border: solid 1px rgba(0,0,0,0);
    overflow: hidden;
    position: absolute;
         box-sizing: border-box;
      
}
body {
    background-color: white;
}
#map {
    width: 100%;
    height: 100%;
    background: #eeeeec;
}
core-drawer-panel:not([narrow]) #navicon {
    display: none;
}

core-drawer-panel[narrow] #navheader {
    display: none;
}

#button-bar {
    z-index: 1;
    float: right;
    top: 10px;
    right: 10px;
    position: absolute;
}

core-toolbar, paper-button[raised] {
    background: #3F51B5;
    color: white;
}

paper-button {
    background: #E8EAF6;
}

#mode-buttons {
    width: 52px;
    right: 0;
    float: right;
    top: 135px;
    position: absolute;
}
#mode-buttons paper-icon-button {
    border: solid 2px black;
    border-radius: 3px;
}
#idicon {
    float: right;
    color: white;
    top: 6px;
    right: 12px;
}

#login {
    float: right;
    top: 6px;
}


g-layermanager {
    background: #eeeeec;;
}
paper-icon-button.side {
    background: white;
    color:black
}
paper-icon-button[enabled=true].side {
    background: #3F51B5;
    color:white;
}


</style>

<core-drawer-panel id="drawerPanel">
  <core-header-panel  main  mode="cover" shadow  style="z-index:0">
    <core-toolbar class="medium-tall">
    </core-toolbar>
     <div id="container">
       
       <div id="map" info="{{buurtinfo||energyinfo}}" ><div id="button-bar"><paper-button id="lufo">toner</paper-button><paper-button raised id="topo">watercolor</paper-button></div></div>

    </div>

    <paper-icon-button icon="menu" id="navicon" on-click="{{toggleDrawer}}"></paper-icon-button>
  
  </core-header-panel>
  <core-header-panel drawer style="background:white;z-index:1">
    <core-toolbar id="navheader"  class="medium-tall">
      
    </core-toolbar>
    <g-filtermanager   map="{{map}}" filters="{{filters}}"></g-filtermanager>
    <g-layermanager   layers="{{layers}}" map="{{map}}"></g-layermanager>
  </core-header-panel>
</core-drawer-panel>

</template>
<script>
 Polymer({
    buurtinfo: false,
    addLayer: false,
    toggleDrawer: function(e) {
        
        this.$.drawerPanel.togglePanel()
    },
    toggleBuurtInfo: function() {
        this.energyinfo=false;
        this.buurtinfo=this.buurtinfo?false:true;       
    },
     toggleEnergyInfo: function() {
        this.buurtinfo = false;
        this.energyinfo=this.energyinfo?false:true;       
    },
    
    ready: function() {
        // Initialize the instance's "list" property to empty array.
        this.layers = this.layers || [];
        this.filters = this.filters || [];
        this.account = this.account || {};
        //TODO
       
    
    map = L.map(this.$.map).setView([52.342, 4.91], 14);    
    var color = new L.StamenTileLayer("watercolor");
    var toner = new L.StamenTileLayer("toner");
    map.addLayer(color);
 
    var hash = L.hash(map);

    
 this.$.lufo.addEventListener('click',function(a){
        a.preventDefault();
        a.stopPropagation();
         map.addLayer(toner).removeLayer(color);
        toner.bringToBack();
        this.setAttribute('raised',true);
        this.nextElementSibling.removeAttribute('raised');
    })
    
    this.$.topo.addEventListener('click',function(a){  
        a.preventDefault();
        a.stopPropagation();
        map.addLayer(color).removeLayer(toner);
        color.bringToBack();
        this.setAttribute('raised',true);
        this.previousElementSibling.removeAttribute('raised');
    })
    this.map = map;
    var s = function (feature) {
    
    var style = {};

    var type = feature.type;
    switch (type) {
      case 1: //'Point'
        style.color = 'rgba(49,79,79,1)';
        style.radius = 5;
        style.selected = {
          color: 'rgba(255,255,0,0.5)',
          radius: 6
        };
        break;
      case 2: //'LineString'
        style.color = 'rgba(161,217,155,0.8)';
        style.size = 3;
        style.selected = {
          color: 'rgba(255,25,0,0.5)',
          size: 4
        };
        break;
      case 3: //'Polygon'
        style.color = 'rgba(255,140,0,0.1)',

        style.outline = {
            color: 'rgba(255,140,0,1)',
            size: 1
          }
       
       
        break;
    }
    
    return style;
}
     mvtSource = new L.TileLayer.MVTSource({
  url: "http://research.geodan.nl/services/vector-tiles/buurtemTiles/{z}/{x}/{y}.pbf",
  //debug: true,
  clickableLayers: ["buurten"],
  getIDForLayerFeature: function(feature) {
    return feature.properties.serial;
  },
  
  /**
   * The filter function gets called when iterating though each vector tile feature (vtf). You have access
   * to every property associated with a given feature (the feature, and the layer). You can also filter
   * based of the context (each tile that the feature is drawn onto).
   *
   * Returning false skips over the feature and it is not drawn.
   *
   * @param feature
   * @returns {boolean}
   */
   config: {
         "title":"Buurten",
        "isFilter": true,
        "filters": [
          {
            "min": 0,
            "unit": "km",
            "max": 12,
            "attribute": "af_brandw",
            "type": "numeriek",
            "displayname": "avg distance to firestation",
            "step":0.1
          },
          {
            "min": 0,
            "unit": "km",
            "max": 70,
            "attribute": "af_ziek_e",
            "type": "numeriek",
            "displayname": "avg distance to hospital"
          },
          {
            "min": 0,
            "unit": "km",
            "max": 130,
            "attribute": "af_ijsbaan",
            "type": "numeriek",
            "displayname": "avg distance to icerink"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_gehuwd",
            "type": "numeriek",
            "displayname": "% maried"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_ongehuwd",
            "type": "numeriek",
            "displayname": "% unmaried"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_gescheid",
            "type": "numeriek",
            "displayname": "% divorced"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_eenp_hh",
            "type": "numeriek",
            "displayname": "% single"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_verweduw",
            "type": "numeriek",
            "displayname": "% widow(er)s"
          },
          {
            "min": 0,
            "unit": "cars",
            "max": 2.5,
            "attribute": "auto_hh",
            "type": "numeriek",
            "displayname": "avg no. of cars per household",
            "step":0.1
          },
          {
            "min": 0,
            "unit": "persons",
            "max": 12,
            "attribute": "gem_hh_gr",
            "type": "numeriek",
            "displayname": "avg household size",
            "step":0.1
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_00_14_jr",
            "type": "numeriek",
            "displayname": "% 0-14 year"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_15_24_jr",
            "type": "numeriek",
            "displayname": "% 15-24 year"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_25_44_jr",
            "type": "numeriek",
            "displayname": "% 25-44 year"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_45_64_jr",
            "type": "numeriek",
            "displayname": "% 45-64 year"
          },
          {
            "min": 0,
            "unit": "%",
            "max": 100,
            "attribute": "p_65_eo_jr",
            "type": "numeriek",
            "displayname": "% 65 year and older"
          }
        ],
       
   },
    style: s,
  filter: function(feature, context) {
    if (feature.layer.name === 'buurten'||feature.layer.name === 'buurten_label') {
      return true;//feature.properties.p_ongehuwd < min;
      
    }
    return false;
  },
  onClick: function(e){
    L.popup()
    .setLatLng(e.latlng)
    .setContent(e.feature.properties.gm_naam+' '+e.feature.properties.bu_naam)
    .openOn(map);
        
        
  },
    layerLink: function(layerName) {
    if (layerName.indexOf('_label') > -1) {
      return layerName.replace('_label','');
    }
    return layerName + '_label';
  }
    
})


map.addLayer(mvtSource);
this.filters = [mvtSource];
    },
    toggleAddLayer: function() {
        //this.addLayer=this.addLayer?false:true;
        this.$.layerlist.toggle();
    },
    toggleLogin: function() {
        this.$.login.toggle();
    }
    });
  </script>
</polymer-element>